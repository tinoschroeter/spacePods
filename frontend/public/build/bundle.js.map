{
  "version": 3,
  "sources": ["../../src/js/canvas.js", "../../src/js/helper.js", "../../src/js/images.js", "../../src/js/screens.js", "../../src/js/entities/Pod.js", "../../src/js/entities/Lazer.js", "../../src/js/entities/SpaceShip.js", "../../src/js/Stars.js", "../../src/js/main.js"],
  "sourcesContent": ["export const canvas = {\n  entity: document.getElementById(\"entityCanvas\"),\n  star1: document.getElementById(\"starCanvas1\"),\n  star2: document.getElementById(\"starCanvas2\"),\n  star3: document.getElementById(\"starCanvas3\"),\n};\n\nexport const ctx = {\n  entity: canvas.entity.getContext(\"2d\"),\n  star1: canvas.star1.getContext(\"2d\"),\n  star2: canvas.star2.getContext(\"2d\"),\n  star3: canvas.star3.getContext(\"2d\"),\n};\n\nfunction makeCanvasFullScreen(canv, factor = 1) {\n  canv.width = factor * window.innerWidth;\n  canv.height = factor * window.innerHeight;\n}\n\nexport function makeCanvasesFullScreen() {\n  makeCanvasFullScreen(canvas.entity);\n  makeCanvasFullScreen(canvas.star1, 2);\n  makeCanvasFullScreen(canvas.star2, 2);\n  makeCanvasFullScreen(canvas.star3, 2);\n}\n\nexport function clearCanvas(key) {\n  ctx[key].clearRect(0, 0, canvas[key].width, canvas[key].height);\n}\n", "export function debounce(fn, delay) {\n  let id;\n  return (...args) => {\n    if (id) clearTimeout(id);\n    id = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nexport function randInt(a, b) {\n  return a + Math.floor((b - a) * Math.random());\n}\n\nexport function randEl(list) {\n  return list[randInt(0, list.length)];\n}\n\nexport function distance(u, v) {\n  return Math.sqrt(Math.pow(u.x - v.x, 2) + Math.pow(u.y - v.y, 2));\n}\n", "export const IMAGE = {};\n\nconst names = [\"ship\", \"asteroid-l\", \"asteroid-m\", \"asteroid-s\"];\n\nexport function preloadImages(callbackFunction) {\n  function preloadImage(i) {\n    if (i < names.length) {\n      const img = new Image();\n      img.onload = () => {\n        preloadImage(i + 1);\n      };\n      IMAGE[names[i]] = img;\n      img.src = `./img/${names[i]}.png`;\n    } else {\n      callbackFunction();\n    }\n  }\n  preloadImage(0);\n}\n", "const screens = document.querySelectorAll(\".screen\");\n\nexport function hideScreen() {\n  screens.forEach((screen) => screen.classList.remove(\"visible\"));\n}\n\nexport function showScreen(name) {\n  hideScreen();\n  document.getElementById(`${name}Screen`).classList.add(\"visible\");\n}\n", "import { canvas, ctx } from \"../canvas.js\";\nimport { distance, randInt, randEl } from \"../helper.js\";\nimport { IMAGE } from \"../images.js\";\nimport { showScreen } from \"../screens.js\";\n\nexport class Pod {\n  static list = [];\n\n  static counts = 0;\n\n  static api = \"http://localhost:3000/api/pods\";\n\n  static SIZE = {\n    m: 64,\n    l: 128,\n  };\n\n  static FRAME_COUNT = {\n    m: 60,\n    l: 120,\n  };\n\n  static SCORE = {\n    m: 2,\n    l: 1,\n  };\n\n  static interval = null;\n\n  static removeAll() {\n    Pod.list = [];\n  }\n\n  static startGenerating(frequency = 1000) {\n    Pod.interval = setInterval(() => {\n      fetch(Pod.api)\n        .then((res) => res.json())\n        .then((data) => {\n          Pod.count = data.length;\n          data.forEach((item) => new Pod(item.name));\n        })\n        .catch((e) => console.error(e));\n    }, frequency);\n  }\n\n  static stopGenerating() {\n    clearInterval(Pod.interval);\n  }\n\n  constructor(podName) {\n    if (Pod.list.find((item) => item.podName === podName)) return;\n\n    this.podName = podName;\n    this.type = randEl([\"l\", \"m\"]);\n    const name = \"asteroid-\" + this.type;\n    this.image = IMAGE[name];\n\n    this.size = Pod.SIZE[this.type];\n\n    const startSide = randEl([\"left\", \"right\", \"top\", \"bottom\"]);\n\n    switch (startSide) {\n      case \"left\":\n        this.pos = {\n          x: -this.size / 2,\n          y: randInt(0, canvas.star1.height),\n        };\n        this.vel = { x: randInt(1, 3), y: randInt(-2, 4) };\n        break;\n      case \"right\":\n        this.pos = {\n          x: canvas.star1.width + this.size / 2,\n          y: randInt(0, canvas.star1.height),\n        };\n        this.vel = { x: -randInt(1, 3), y: randInt(-2, 4) };\n        break;\n      case \"top\":\n        this.pos = {\n          x: randInt(0, canvas.star1.width),\n          y: -this.size / 2,\n        };\n        this.vel = { x: randInt(-2, 4), y: randInt(1, 3) };\n        break;\n      case \"bottom\":\n        this.pos = {\n          x: randInt(0, canvas.star1.width),\n          y: canvas.star1.height + this.size / 2,\n        };\n        this.vel = { x: randInt(-2, 4), y: -randInt(1, 3) };\n        break;\n    }\n    this.animationTimer = 0;\n    this.frameCount = Pod.FRAME_COUNT[this.type];\n    this.parallax = 1;\n    this.drawPos = { x: 0, y: 0 };\n    this.destroyed = false;\n    this.score = Pod.SCORE[this.type];\n    Pod.list.push(this);\n  }\n\n  update(ship) {\n    this.animationTimer++;\n    if (this.animationTimer >= this.frameCount) this.animationTimer = 0;\n    this.pos.x += this.vel.x;\n    this.pos.y += this.vel.y;\n    this.drawPos = {\n      x: this.pos.x - this.parallax * ship.pos.x,\n      y: this.pos.y - this.parallax * ship.pos.y,\n    };\n    if (this.destroyed) {\n      this.vel = { x: 0, y: 0 };\n      this.size *= 0.8;\n      if (this.size <= 1) {\n        this.destroy();\n      }\n    }\n    //this.destroyShip(ship);\n    this.removeIfOutside();\n  }\n\n  draw() {\n    //console.log(Pod.list)\n    //console.log(`x: ${this.pos.x} y: ${this.pos.y}`)\n    ctx.entity.save();\n    ctx.entity.translate(this.drawPos.x, this.drawPos.y);\n    ctx.entity.drawImage(\n      this.image,\n      this.animationTimer * Pod.SIZE[this.type],\n      0,\n      Pod.SIZE[this.type],\n      Pod.SIZE[this.type],\n      -this.size / 2,\n      -this.size / 2,\n      this.size,\n      this.size\n    );\n\n    ctx.entity.fillStyle = \"#FFA500\";\n    ctx.entity.font = \"18px serif\";\n    ctx.entity.textAlign = \"center\";\n    ctx.entity.fillText(this.podName, 0, 0);\n\n    ctx.entity.restore();\n  }\n  removeIfOutside() {\n    if (\n      this.pos.x + this.size / 2 < 0 ||\n      this.pos.y + this.size / 2 < 0 ||\n      this.pos.x > canvas.star1.width + this.size / 2 ||\n      this.pos.y > canvas.star1.height + this.size / 2\n    ) {\n      //console.log(\"Remove: \", this)\n      this.remove();\n    }\n  }\n\n  remove() {\n    Pod.list = Pod.list.filter((a) => a != this);\n  }\n\n  destroy() {\n    fetch(`${Pod.api}/${this.podName}`, {\n      method: \"DELETE\",\n    })\n      .then((res) => res.json())\n      .then((data) => console.log(data))\n      .catch((e) => console.error(e));\n    this.remove();\n  }\n\n  destroyShip(ship) {\n    if (\n      !ship.destroyed &&\n      distance(ship.pos, this.drawPos) < ship.size.x / 2 + this.size / 2\n    ) {\n      ship.destroyed = true;\n      ship.rotationForce = randEl([+1, -1]) * 0.2;\n      showScreen(\"gameover\");\n    }\n  }\n}\n", "import { Pod } from \"./Pod.js\";\nimport { canvas, ctx } from \"../canvas.js\";\nimport { distance } from \"../helper.js\";\n\nexport class Lazer {\n  static list = [];\n\n  constructor({ pos, initialVel, rotation }) {\n    this.pos = pos;\n    this.rotation = rotation;\n    this.speed = 15;\n    this.vel = {\n      x: initialVel.x + this.speed * Math.cos(rotation),\n      y: initialVel.y + this.speed * Math.sin(rotation),\n    };\n    Lazer.list.push(this);\n  }\n\n  draw() {\n    ctx.entity.save();\n    ctx.entity.fillStyle = \"green\";\n    ctx.entity.globalAlpha = 0.8;\n    ctx.entity.translate(this.pos.x, this.pos.y);\n    ctx.entity.rotate(this.rotation);\n    ctx.entity.fillRect(0, -2, 40, 4);\n    ctx.entity.fillStyle = \"white\";\n    ctx.entity.fillRect(0, -0.5, 40, 1);\n    ctx.entity.restore();\n  }\n\n  update(ship) {\n    this.pos.x += this.vel.x;\n    this.pos.y += this.vel.y;\n    this.destroyPod(ship);\n    this.removeIfOutside();\n  }\n\n  removeIfOutside() {\n    if (\n      this.pos.x < 0 ||\n      this.pos.x > canvas.star1.width ||\n      this.pos.y < 0 ||\n      this.pos.y > canvas.star1.height\n    ) {\n      this.remove();\n    }\n  }\n\n  remove() {\n    Lazer.list = Lazer.list.filter((l) => l != this);\n  }\n\n  destroyPod(ship) {\n    Pod.list.forEach((asteroid) => {\n      if (distance(this.pos, asteroid.drawPos) < asteroid.size / 2) {\n        asteroid.destroyed = true;\n        ship.score += asteroid.score;\n        ship.showScore();\n        this.remove();\n      }\n    });\n  }\n}\n", "import { canvas, ctx } from \"../canvas.js\";\nimport { IMAGE } from \"../images.js\";\nimport { Lazer } from \"./Lazer.js\";\nimport { Pod } from \"./Pod.js\";\n\nexport class SpaceShip {\n  constructor() {\n    this.image = IMAGE.ship;\n    this.size = { x: 100, y: 100 };\n\n    this.pos = {\n      x: canvas.entity.width / 2,\n      y: canvas.entity.height / 2,\n    };\n    this.vel = { x: 0.6, y: 0 };\n    this.force = { x: 0, y: 0 };\n    this.maximalForce = 0.48;\n    this.friction = 0.98;\n\n    this.rotation = 0;\n    this.rotationVel = 0;\n    this.rotationForce = 0;\n    this.rotationMaximalForce = 0.07;\n    this.rotationFriction = 0.01;\n\n    this.status = \"idle\";\n    this.frames = {\n      idle: 0,\n      boost_forwards: 1,\n      boost_backwards: 2,\n      turn_right: 3,\n      turn_left: 4,\n    };\n\n    this.destroyed = false;\n    this.score = 0;\n    this.alpha = 1;\n\n    this.scoreDisplay = document.getElementById(\"scoreDisplay\");\n    this.podDisplay = document.getElementById(\"podDisplay\");\n    this.scoreDisplayEnd = document.getElementById(\"scoreDisplayEnd\");\n    this.addControls();\n  }\n\n  update() {\n    this.vel.x += this.force.x;\n    this.vel.y += this.force.y;\n    this.force.x = 0;\n    this.force.y = 0;\n    this.pos.x += this.vel.x;\n    this.pos.y += this.vel.y;\n    this.vel.x *= this.friction;\n    this.vel.y *= this.friction;\n\n    this.rotationVel += this.rotationForce;\n    this.rotationForce = 0;\n    this.rotation += this.rotationVel;\n    this.rotationVel *= this.rotationFriction;\n\n    if (this.destroyed) {\n      this.alpha *= 0.95;\n      if (this.alpha <= 0.01) this.alpha = 0;\n    }\n\n    this.handleTinyVel();\n    this.boundToCanvas();\n  }\n\n  handleTinyVel(threshold = 0.01) {\n    if (Math.abs(this.vel.x) < threshold) {\n      this.vel.x = 0;\n    }\n    if (Math.abs(this.vel.y) < threshold) {\n      this.vel.y = 0;\n    }\n\n    if (Math.abs(this.rotationVel) < threshold) {\n      this.rotationVel = 0;\n    }\n  }\n\n  boundToCanvas() {\n    this.pos.x = Math.max(10, Math.min(canvas.entity.width, this.pos.x));\n    this.pos.y = Math.max(10, Math.min(canvas.entity.height, this.pos.y));\n  }\n\n  draw() {\n    ctx.entity.save();\n    ctx.entity.globalAlpha = this.alpha;\n    ctx.entity.translate(this.pos.x, this.pos.y);\n    ctx.entity.rotate(this.rotation);\n    ctx.entity.drawImage(\n      this.image,\n      this.frames[this.status] * this.size.x,\n      0,\n      this.size.x,\n      this.size.y,\n      -this.size.x / 2,\n      -this.size.y / 2,\n      this.size.x,\n      this.size.y\n    );\n\n    ctx.entity.restore();\n  }\n\n  showScore() {\n    this.scoreDisplay.innerText = `Score: ${this.score}`;\n    this.scoreDisplayEnd.innerText = `Score: ${this.score}`;\n  }\n\n  showPods() {\n    const show = () =>\n      (this.podDisplay.innerText = Pod.count ? `Pods:  ${Pod.count}` : `Pods:  0`);\n    show();\n    setInterval(() => show(), 1000);\n  }\n\n  addControls() {\n    window.addEventListener(\"keydown\", (e) => {\n      switch (e.key) {\n        case \"ArrowUp\":\n          this.boost({ direction: \"forwards\" });\n          break;\n        case \"ArrowDown\":\n          this.boost({ direction: \"backwards\" });\n          break;\n        case \"ArrowLeft\":\n          this.turn({ direction: \"left\" });\n          break;\n        case \"ArrowRight\":\n          this.turn({ direction: \"right\" });\n          break;\n        case \" \":\n          this.shoot();\n          break;\n      }\n    });\n    window.addEventListener(\"keyup\", (e) => {\n      const keys = [\"ArrowLeft\", \"ArrowRight\", \"ArrowUp\", \"ArrowDown\"];\n      if (keys.includes(e.key)) {\n        this.status = \"idle\";\n      }\n    });\n  }\n\n  shoot() {\n    if (this.destroyed) return;\n    new Lazer({\n      pos: { ...this.pos },\n      initialVel: { ...this.vel },\n      rotation: this.rotation,\n    });\n  }\n\n  turn({ direction }) {\n    if (this.destroyed) return;\n    this.status = `turn_${direction}`;\n    const sign = direction == \"right\" ? +1 : -1;\n    this.rotationForce = sign * this.rotationMaximalForce;\n  }\n\n  boost({ direction }) {\n    if (this.destroyed) return;\n    this.status = `boost_${direction}`;\n    const sign = direction == \"forwards\" ? +1 : -1;\n    this.force = {\n      x: sign * this.maximalForce * Math.cos(this.rotation),\n      y: sign * this.maximalForce * Math.sin(this.rotation),\n    };\n  }\n\n  reset() {\n    this.score = 0;\n    this.showScore();\n    this.destroyed = false;\n    this.status = \"idle\";\n    this.rotation = 0;\n    this.rotationVel = 0;\n    this.vel = { x: 0, y: 0 };\n    this.alpha = 1;\n  }\n}\n", "import { randInt } from \"./helper.js\";\nimport { canvas, clearCanvas, ctx } from \"./canvas.js\";\n\nexport class Stars {\n  constructor() {\n    this.sizes = [\"1\", \"2\", \"3\"];\n    this.list = { 1: [], 2: [], 3: [] };\n    this.number = { 1: 3000, 2: 1000, 3: 700 };\n    this.parallax = { 1: 0.75, 2: 0.8, 3: 0.85 };\n    this.alpha = { 1: 0.5, 2: 0.7, 3: 0.8 };\n    this.color = \"rgb(200, 179, 79)\";\n    this.scale = 1;\n    this.scaleVel = 0.00025;\n    this.updateCanvas({\n      x: canvas.entity.width / 2,\n      y: canvas.entity.height / 2,\n    });\n  }\n  generate() {\n    for (const size of this.sizes) {\n      this.list[size] = [];\n      for (let i = 0; i < this.number[size]; i++) {\n        const x = randInt(0, canvas[`star${size}`].width);\n        const y = randInt(0, canvas[`star${size}`].height);\n        this.list[size].push({ x, y });\n      }\n    }\n  }\n  draw() {\n    for (const size of this.sizes) {\n      clearCanvas(`star${size}`);\n      ctx[`star${size}`].fillStyle = this.color;\n      ctx[`star${size}`].globalAlpha = this.alpha[size];\n      this.list[size].forEach(({ x, y }) => {\n        ctx[`star${size}`].beginPath();\n        ctx[`star${size}`].arc(x, y, size / 2, 0, 2 * Math.PI);\n        ctx[`star${size}`].fill();\n      });\n    }\n  }\n  update(ship) {\n    this.updateCanvas(ship.pos);\n    this.updateScale();\n  }\n\n  updateScale() {\n    this.scale += this.scaleVel;\n    if (this.scale > 1.7 || this.scale < 1) {\n      this.scaleVel *= -1;\n    }\n  }\n\n  updateCanvas(pos) {\n    for (const size of this.sizes) {\n      const offset = {\n        x: -this.parallax[size] * pos.x,\n        y: -this.parallax[size] * pos.y,\n      };\n      canvas[`star${size}`].style.transform =\n        `translateX(${offset.x}px)` +\n        `translateY(${offset.y}px)` +\n        `scale(${this.scale})`;\n    }\n  }\n}\n", "import { Pod } from \"./entities/Pod.js\";\nimport { Lazer } from \"./entities/Lazer.js\";\nimport { SpaceShip } from \"./entities/SpaceShip.js\";\nimport { clearCanvas, makeCanvasesFullScreen } from \"./canvas.js\";\nimport { debounce } from \"./helper.js\";\nimport { preloadImages } from \"./images.js\";\nimport { Stars } from \"./Stars.js\";\nimport { hideScreen, showScreen } from \"./screens.js\";\n\nmakeCanvasesFullScreen();\nshowScreen(\"loading\");\n\npreloadImages(() => {\n  showScreen(\"start\");\n\n  const stars = new Stars();\n  const ship = new SpaceShip();\n\n  let gameRunning = false;\n\n  stars.generate();\n  stars.draw();\n\n  window.addEventListener(\"keydown\", (e) => {\n    if (e.key == \"Enter\") {\n      if (ship.destroyed) {\n        hideScreen();\n        Pod.removeAll();\n        ship.reset();\n      } else if (gameRunning) {\n        showScreen(\"pause\");\n        gameRunning = false;\n        Pod.stopGenerating();\n      } else if (!gameRunning) {\n        hideScreen();\n        gameRunning = true;\n        Pod.startGenerating();\n        ship.showScore();\n        ship.showPods();\n        gameLoop();\n      }\n    }\n  });\n\n  window.addEventListener(\n    \"resize\",\n    debounce(() => {\n      makeCanvasesFullScreen();\n      stars.generate();\n      stars.draw();\n    }, 150)\n  );\n\n  function gameLoop() {\n    clearCanvas(\"entity\");\n    [...Lazer.list, ...Pod.list, ship, stars].forEach((obj) =>\n      obj.update(ship)\n    );\n    [...Lazer.list, ...Pod.list, ship].forEach((obj) => obj.draw());\n    if (gameRunning) requestAnimationFrame(gameLoop);\n  }\n});\n"],
  "mappings": ";;;;;;;;;AAAO,MAAM,SAAS;AAAA,IACpB,QAAQ,SAAS,eAAe,cAAc;AAAA,IAC9C,OAAO,SAAS,eAAe,aAAa;AAAA,IAC5C,OAAO,SAAS,eAAe,aAAa;AAAA,IAC5C,OAAO,SAAS,eAAe,aAAa;AAAA,EAC9C;AAEO,MAAM,MAAM;AAAA,IACjB,QAAQ,OAAO,OAAO,WAAW,IAAI;AAAA,IACrC,OAAO,OAAO,MAAM,WAAW,IAAI;AAAA,IACnC,OAAO,OAAO,MAAM,WAAW,IAAI;AAAA,IACnC,OAAO,OAAO,MAAM,WAAW,IAAI;AAAA,EACrC;AAEA,gCAA8B,MAAM,SAAS,GAAG;AAC9C,SAAK,QAAQ,SAAS,OAAO;AAC7B,SAAK,SAAS,SAAS,OAAO;AAAA,EAChC;AAEO,oCAAkC;AACvC,yBAAqB,OAAO,MAAM;AAClC,yBAAqB,OAAO,OAAO,CAAC;AACpC,yBAAqB,OAAO,OAAO,CAAC;AACpC,yBAAqB,OAAO,OAAO,CAAC;AAAA,EACtC;AAEO,uBAAqB,KAAK;AAC/B,QAAI,KAAK,UAAU,GAAG,GAAG,OAAO,KAAK,OAAO,OAAO,KAAK,MAAM;AAAA,EAChE;;;AC5BO,oBAAkB,IAAI,OAAO;AAClC,QAAI;AACJ,WAAO,IAAI,SAAS;AAClB,UAAI;AAAI,qBAAa,EAAE;AACvB,WAAK,WAAW,MAAM;AACpB,WAAG,GAAG,IAAI;AAAA,MACZ,GAAG,KAAK;AAAA,IACV;AAAA,EACF;AAEO,mBAAiB,GAAG,GAAG;AAC5B,WAAO,IAAI,KAAK,MAAO,KAAI,KAAK,KAAK,OAAO,CAAC;AAAA,EAC/C;AAEO,kBAAgB,MAAM;AAC3B,WAAO,KAAK,QAAQ,GAAG,KAAK,MAAM;AAAA,EACpC;AAEO,oBAAkB,GAAG,GAAG;AAC7B,WAAO,KAAK,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,KAAK,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;AAAA,EAClE;;;ACpBO,MAAM,QAAQ,CAAC;AAEtB,MAAM,QAAQ,CAAC,QAAQ,cAAc,cAAc,YAAY;AAExD,yBAAuB,kBAAkB;AAC9C,0BAAsB,GAAG;AACvB,UAAI,IAAI,MAAM,QAAQ;AACpB,cAAM,MAAM,IAAI,MAAM;AACtB,YAAI,SAAS,MAAM;AACjB,uBAAa,IAAI,CAAC;AAAA,QACpB;AACA,cAAM,MAAM,MAAM;AAClB,YAAI,MAAM,SAAS,MAAM;AAAA,MAC3B,OAAO;AACL,yBAAiB;AAAA,MACnB;AAAA,IACF;AACA,iBAAa,CAAC;AAAA,EAChB;;;AClBA,MAAM,UAAU,SAAS,iBAAiB,SAAS;AAE5C,wBAAsB;AAC3B,YAAQ,QAAQ,CAAC,WAAW,OAAO,UAAU,OAAO,SAAS,CAAC;AAAA,EAChE;AAEO,sBAAoB,MAAM;AAC/B,eAAW;AACX,aAAS,eAAe,GAAG,YAAY,EAAE,UAAU,IAAI,SAAS;AAAA,EAClE;;;ACJO,mBAAU;AAAA,WAwBR,YAAY;AACjB,WAAI,OAAO,CAAC;AAAA,IACd;AAAA,WAEO,gBAAgB,YAAY,KAAM;AACvC,WAAI,WAAW,YAAY,MAAM;AAC/B,cAAM,KAAI,GAAG,EACV,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,EACxB,KAAK,CAAC,SAAS;AACd,eAAI,QAAQ,KAAK;AACjB,eAAK,QAAQ,CAAC,SAAS,IAAI,KAAI,KAAK,IAAI,CAAC;AAAA,QAC3C,CAAC,EACA,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,CAAC;AAAA,MAClC,GAAG,SAAS;AAAA,IACd;AAAA,WAEO,iBAAiB;AACtB,oBAAc,KAAI,QAAQ;AAAA,IAC5B;AAAA,IAEA,YAAY,SAAS;AACnB,UAAI,KAAI,KAAK,KAAK,CAAC,SAAS,KAAK,YAAY,OAAO;AAAG;AAEvD,WAAK,UAAU;AACf,WAAK,OAAO,OAAO,CAAC,KAAK,GAAG,CAAC;AAC7B,YAAM,OAAO,cAAc,KAAK;AAChC,WAAK,QAAQ,MAAM;AAEnB,WAAK,OAAO,KAAI,KAAK,KAAK;AAE1B,YAAM,YAAY,OAAO,CAAC,QAAQ,SAAS,OAAO,QAAQ,CAAC;AAE3D,cAAQ;AAAA,aACD;AACH,eAAK,MAAM;AAAA,YACT,GAAG,CAAC,KAAK,OAAO;AAAA,YAChB,GAAG,QAAQ,GAAG,OAAO,MAAM,MAAM;AAAA,UACnC;AACA,eAAK,MAAM,EAAE,GAAG,QAAQ,GAAG,CAAC,GAAG,GAAG,QAAQ,IAAI,CAAC,EAAE;AACjD;AAAA,aACG;AACH,eAAK,MAAM;AAAA,YACT,GAAG,OAAO,MAAM,QAAQ,KAAK,OAAO;AAAA,YACpC,GAAG,QAAQ,GAAG,OAAO,MAAM,MAAM;AAAA,UACnC;AACA,eAAK,MAAM,EAAE,GAAG,CAAC,QAAQ,GAAG,CAAC,GAAG,GAAG,QAAQ,IAAI,CAAC,EAAE;AAClD;AAAA,aACG;AACH,eAAK,MAAM;AAAA,YACT,GAAG,QAAQ,GAAG,OAAO,MAAM,KAAK;AAAA,YAChC,GAAG,CAAC,KAAK,OAAO;AAAA,UAClB;AACA,eAAK,MAAM,EAAE,GAAG,QAAQ,IAAI,CAAC,GAAG,GAAG,QAAQ,GAAG,CAAC,EAAE;AACjD;AAAA,aACG;AACH,eAAK,MAAM;AAAA,YACT,GAAG,QAAQ,GAAG,OAAO,MAAM,KAAK;AAAA,YAChC,GAAG,OAAO,MAAM,SAAS,KAAK,OAAO;AAAA,UACvC;AACA,eAAK,MAAM,EAAE,GAAG,QAAQ,IAAI,CAAC,GAAG,GAAG,CAAC,QAAQ,GAAG,CAAC,EAAE;AAClD;AAAA;AAEJ,WAAK,iBAAiB;AACtB,WAAK,aAAa,KAAI,YAAY,KAAK;AACvC,WAAK,WAAW;AAChB,WAAK,UAAU,EAAE,GAAG,GAAG,GAAG,EAAE;AAC5B,WAAK,YAAY;AACjB,WAAK,QAAQ,KAAI,MAAM,KAAK;AAC5B,WAAI,KAAK,KAAK,IAAI;AAAA,IACpB;AAAA,IAEA,OAAO,MAAM;AACX,WAAK;AACL,UAAI,KAAK,kBAAkB,KAAK;AAAY,aAAK,iBAAiB;AAClE,WAAK,IAAI,KAAK,KAAK,IAAI;AACvB,WAAK,IAAI,KAAK,KAAK,IAAI;AACvB,WAAK,UAAU;AAAA,QACb,GAAG,KAAK,IAAI,IAAI,KAAK,WAAW,KAAK,IAAI;AAAA,QACzC,GAAG,KAAK,IAAI,IAAI,KAAK,WAAW,KAAK,IAAI;AAAA,MAC3C;AACA,UAAI,KAAK,WAAW;AAClB,aAAK,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE;AACxB,aAAK,QAAQ;AACb,YAAI,KAAK,QAAQ,GAAG;AAClB,eAAK,QAAQ;AAAA,QACf;AAAA,MACF;AAEA,WAAK,gBAAgB;AAAA,IACvB;AAAA,IAEA,OAAO;AAGL,UAAI,OAAO,KAAK;AAChB,UAAI,OAAO,UAAU,KAAK,QAAQ,GAAG,KAAK,QAAQ,CAAC;AACnD,UAAI,OAAO,UACT,KAAK,OACL,KAAK,iBAAiB,KAAI,KAAK,KAAK,OACpC,GACA,KAAI,KAAK,KAAK,OACd,KAAI,KAAK,KAAK,OACd,CAAC,KAAK,OAAO,GACb,CAAC,KAAK,OAAO,GACb,KAAK,MACL,KAAK,IACP;AAEA,UAAI,OAAO,YAAY;AACvB,UAAI,OAAO,OAAO;AAClB,UAAI,OAAO,YAAY;AACvB,UAAI,OAAO,SAAS,KAAK,SAAS,GAAG,CAAC;AAEtC,UAAI,OAAO,QAAQ;AAAA,IACrB;AAAA,IACA,kBAAkB;AAChB,UACE,KAAK,IAAI,IAAI,KAAK,OAAO,IAAI,KAC7B,KAAK,IAAI,IAAI,KAAK,OAAO,IAAI,KAC7B,KAAK,IAAI,IAAI,OAAO,MAAM,QAAQ,KAAK,OAAO,KAC9C,KAAK,IAAI,IAAI,OAAO,MAAM,SAAS,KAAK,OAAO,GAC/C;AAEA,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA,IAEA,SAAS;AACP,WAAI,OAAO,KAAI,KAAK,OAAO,CAAC,MAAM,KAAK,IAAI;AAAA,IAC7C;AAAA,IAEA,UAAU;AACR,YAAM,GAAG,KAAI,OAAO,KAAK,WAAW;AAAA,QAClC,QAAQ;AAAA,MACV,CAAC,EACE,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,EACxB,KAAK,CAAC,SAAS,QAAQ,IAAI,IAAI,CAAC,EAChC,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,CAAC;AAChC,WAAK,OAAO;AAAA,IACd;AAAA,IAEA,YAAY,MAAM;AAChB,UACE,CAAC,KAAK,aACN,SAAS,KAAK,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,OAAO,GACjE;AACA,aAAK,YAAY;AACjB,aAAK,gBAAgB,OAAO,CAAC,GAAI,EAAE,CAAC,IAAI;AACxC,mBAAW,UAAU;AAAA,MACvB;AAAA,IACF;AAAA,EACF;AA/KO;AACE,gBADF,KACE,QAAO,CAAC;AAER,gBAHF,KAGE,UAAS;AAET,gBALF,KAKE,OAAM;AAEN,gBAPF,KAOE,QAAO;AAAA,IACZ,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AAEO,gBAZF,KAYE,eAAc;AAAA,IACnB,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AAEO,gBAjBF,KAiBE,SAAQ;AAAA,IACb,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AAEO,gBAtBF,KAsBE,YAAW;;;ACvBb,qBAAY;AAAA,IAGjB,YAAY,EAAE,KAAK,YAAY,YAAY;AACzC,WAAK,MAAM;AACX,WAAK,WAAW;AAChB,WAAK,QAAQ;AACb,WAAK,MAAM;AAAA,QACT,GAAG,WAAW,IAAI,KAAK,QAAQ,KAAK,IAAI,QAAQ;AAAA,QAChD,GAAG,WAAW,IAAI,KAAK,QAAQ,KAAK,IAAI,QAAQ;AAAA,MAClD;AACA,aAAM,KAAK,KAAK,IAAI;AAAA,IACtB;AAAA,IAEA,OAAO;AACL,UAAI,OAAO,KAAK;AAChB,UAAI,OAAO,YAAY;AACvB,UAAI,OAAO,cAAc;AACzB,UAAI,OAAO,UAAU,KAAK,IAAI,GAAG,KAAK,IAAI,CAAC;AAC3C,UAAI,OAAO,OAAO,KAAK,QAAQ;AAC/B,UAAI,OAAO,SAAS,GAAG,IAAI,IAAI,CAAC;AAChC,UAAI,OAAO,YAAY;AACvB,UAAI,OAAO,SAAS,GAAG,MAAM,IAAI,CAAC;AAClC,UAAI,OAAO,QAAQ;AAAA,IACrB;AAAA,IAEA,OAAO,MAAM;AACX,WAAK,IAAI,KAAK,KAAK,IAAI;AACvB,WAAK,IAAI,KAAK,KAAK,IAAI;AACvB,WAAK,WAAW,IAAI;AACpB,WAAK,gBAAgB;AAAA,IACvB;AAAA,IAEA,kBAAkB;AAChB,UACE,KAAK,IAAI,IAAI,KACb,KAAK,IAAI,IAAI,OAAO,MAAM,SAC1B,KAAK,IAAI,IAAI,KACb,KAAK,IAAI,IAAI,OAAO,MAAM,QAC1B;AACA,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA,IAEA,SAAS;AACP,aAAM,OAAO,OAAM,KAAK,OAAO,CAAC,MAAM,KAAK,IAAI;AAAA,IACjD;AAAA,IAEA,WAAW,MAAM;AACf,UAAI,KAAK,QAAQ,CAAC,aAAa;AAC7B,YAAI,SAAS,KAAK,KAAK,SAAS,OAAO,IAAI,SAAS,OAAO,GAAG;AAC5D,mBAAS,YAAY;AACrB,eAAK,SAAS,SAAS;AACvB,eAAK,UAAU;AACf,eAAK,OAAO;AAAA,QACd;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AA1DO;AACE,gBADF,OACE,QAAO,CAAC;;;ACAV,wBAAgB;AAAA,IACrB,cAAc;AACZ,WAAK,QAAQ,MAAM;AACnB,WAAK,OAAO,EAAE,GAAG,KAAK,GAAG,IAAI;AAE7B,WAAK,MAAM;AAAA,QACT,GAAG,OAAO,OAAO,QAAQ;AAAA,QACzB,GAAG,OAAO,OAAO,SAAS;AAAA,MAC5B;AACA,WAAK,MAAM,EAAE,GAAG,KAAK,GAAG,EAAE;AAC1B,WAAK,QAAQ,EAAE,GAAG,GAAG,GAAG,EAAE;AAC1B,WAAK,eAAe;AACpB,WAAK,WAAW;AAEhB,WAAK,WAAW;AAChB,WAAK,cAAc;AACnB,WAAK,gBAAgB;AACrB,WAAK,uBAAuB;AAC5B,WAAK,mBAAmB;AAExB,WAAK,SAAS;AACd,WAAK,SAAS;AAAA,QACZ,MAAM;AAAA,QACN,gBAAgB;AAAA,QAChB,iBAAiB;AAAA,QACjB,YAAY;AAAA,QACZ,WAAW;AAAA,MACb;AAEA,WAAK,YAAY;AACjB,WAAK,QAAQ;AACb,WAAK,QAAQ;AAEb,WAAK,eAAe,SAAS,eAAe,cAAc;AAC1D,WAAK,aAAa,SAAS,eAAe,YAAY;AACtD,WAAK,kBAAkB,SAAS,eAAe,iBAAiB;AAChE,WAAK,YAAY;AAAA,IACnB;AAAA,IAEA,SAAS;AACP,WAAK,IAAI,KAAK,KAAK,MAAM;AACzB,WAAK,IAAI,KAAK,KAAK,MAAM;AACzB,WAAK,MAAM,IAAI;AACf,WAAK,MAAM,IAAI;AACf,WAAK,IAAI,KAAK,KAAK,IAAI;AACvB,WAAK,IAAI,KAAK,KAAK,IAAI;AACvB,WAAK,IAAI,KAAK,KAAK;AACnB,WAAK,IAAI,KAAK,KAAK;AAEnB,WAAK,eAAe,KAAK;AACzB,WAAK,gBAAgB;AACrB,WAAK,YAAY,KAAK;AACtB,WAAK,eAAe,KAAK;AAEzB,UAAI,KAAK,WAAW;AAClB,aAAK,SAAS;AACd,YAAI,KAAK,SAAS;AAAM,eAAK,QAAQ;AAAA,MACvC;AAEA,WAAK,cAAc;AACnB,WAAK,cAAc;AAAA,IACrB;AAAA,IAEA,cAAc,YAAY,MAAM;AAC9B,UAAI,KAAK,IAAI,KAAK,IAAI,CAAC,IAAI,WAAW;AACpC,aAAK,IAAI,IAAI;AAAA,MACf;AACA,UAAI,KAAK,IAAI,KAAK,IAAI,CAAC,IAAI,WAAW;AACpC,aAAK,IAAI,IAAI;AAAA,MACf;AAEA,UAAI,KAAK,IAAI,KAAK,WAAW,IAAI,WAAW;AAC1C,aAAK,cAAc;AAAA,MACrB;AAAA,IACF;AAAA,IAEA,gBAAgB;AACd,WAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,OAAO,OAAO,OAAO,KAAK,IAAI,CAAC,CAAC;AACnE,WAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,OAAO,OAAO,QAAQ,KAAK,IAAI,CAAC,CAAC;AAAA,IACtE;AAAA,IAEA,OAAO;AACL,UAAI,OAAO,KAAK;AAChB,UAAI,OAAO,cAAc,KAAK;AAC9B,UAAI,OAAO,UAAU,KAAK,IAAI,GAAG,KAAK,IAAI,CAAC;AAC3C,UAAI,OAAO,OAAO,KAAK,QAAQ;AAC/B,UAAI,OAAO,UACT,KAAK,OACL,KAAK,OAAO,KAAK,UAAU,KAAK,KAAK,GACrC,GACA,KAAK,KAAK,GACV,KAAK,KAAK,GACV,CAAC,KAAK,KAAK,IAAI,GACf,CAAC,KAAK,KAAK,IAAI,GACf,KAAK,KAAK,GACV,KAAK,KAAK,CACZ;AAEA,UAAI,OAAO,QAAQ;AAAA,IACrB;AAAA,IAEA,YAAY;AACV,WAAK,aAAa,YAAY,UAAU,KAAK;AAC7C,WAAK,gBAAgB,YAAY,UAAU,KAAK;AAAA,IAClD;AAAA,IAEA,WAAW;AACT,YAAM,OAAO,MACV,KAAK,WAAW,YAAY,IAAI,QAAQ,UAAU,IAAI,UAAU;AACnE,WAAK;AACL,kBAAY,MAAM,KAAK,GAAG,GAAI;AAAA,IAChC;AAAA,IAEA,cAAc;AACZ,aAAO,iBAAiB,WAAW,CAAC,MAAM;AACxC,gBAAQ,EAAE;AAAA,eACH;AACH,iBAAK,MAAM,EAAE,WAAW,WAAW,CAAC;AACpC;AAAA,eACG;AACH,iBAAK,MAAM,EAAE,WAAW,YAAY,CAAC;AACrC;AAAA,eACG;AACH,iBAAK,KAAK,EAAE,WAAW,OAAO,CAAC;AAC/B;AAAA,eACG;AACH,iBAAK,KAAK,EAAE,WAAW,QAAQ,CAAC;AAChC;AAAA,eACG;AACH,iBAAK,MAAM;AACX;AAAA;AAAA,MAEN,CAAC;AACD,aAAO,iBAAiB,SAAS,CAAC,MAAM;AACtC,cAAM,OAAO,CAAC,aAAa,cAAc,WAAW,WAAW;AAC/D,YAAI,KAAK,SAAS,EAAE,GAAG,GAAG;AACxB,eAAK,SAAS;AAAA,QAChB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IAEA,QAAQ;AACN,UAAI,KAAK;AAAW;AACpB,UAAI,MAAM;AAAA,QACR,KAAK,KAAK,KAAK,IAAI;AAAA,QACnB,YAAY,KAAK,KAAK,IAAI;AAAA,QAC1B,UAAU,KAAK;AAAA,MACjB,CAAC;AAAA,IACH;AAAA,IAEA,KAAK,EAAE,aAAa;AAClB,UAAI,KAAK;AAAW;AACpB,WAAK,SAAS,QAAQ;AACtB,YAAM,OAAO,aAAa,UAAU,IAAK;AACzC,WAAK,gBAAgB,OAAO,KAAK;AAAA,IACnC;AAAA,IAEA,MAAM,EAAE,aAAa;AACnB,UAAI,KAAK;AAAW;AACpB,WAAK,SAAS,SAAS;AACvB,YAAM,OAAO,aAAa,aAAa,IAAK;AAC5C,WAAK,QAAQ;AAAA,QACX,GAAG,OAAO,KAAK,eAAe,KAAK,IAAI,KAAK,QAAQ;AAAA,QACpD,GAAG,OAAO,KAAK,eAAe,KAAK,IAAI,KAAK,QAAQ;AAAA,MACtD;AAAA,IACF;AAAA,IAEA,QAAQ;AACN,WAAK,QAAQ;AACb,WAAK,UAAU;AACf,WAAK,YAAY;AACjB,WAAK,SAAS;AACd,WAAK,WAAW;AAChB,WAAK,cAAc;AACnB,WAAK,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE;AACxB,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;;;ACnLO,oBAAY;AAAA,IACjB,cAAc;AACZ,WAAK,QAAQ,CAAC,KAAK,KAAK,GAAG;AAC3B,WAAK,OAAO,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE;AAClC,WAAK,SAAS,EAAE,GAAG,KAAM,GAAG,KAAM,GAAG,IAAI;AACzC,WAAK,WAAW,EAAE,GAAG,MAAM,GAAG,KAAK,GAAG,KAAK;AAC3C,WAAK,QAAQ,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AACtC,WAAK,QAAQ;AACb,WAAK,QAAQ;AACb,WAAK,WAAW;AAChB,WAAK,aAAa;AAAA,QAChB,GAAG,OAAO,OAAO,QAAQ;AAAA,QACzB,GAAG,OAAO,OAAO,SAAS;AAAA,MAC5B,CAAC;AAAA,IACH;AAAA,IACA,WAAW;AACT,iBAAW,QAAQ,KAAK,OAAO;AAC7B,aAAK,KAAK,QAAQ,CAAC;AACnB,iBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,OAAO,KAAK;AAC1C,gBAAM,IAAI,QAAQ,GAAG,OAAO,OAAO,QAAQ,KAAK;AAChD,gBAAM,IAAI,QAAQ,GAAG,OAAO,OAAO,QAAQ,MAAM;AACjD,eAAK,KAAK,MAAM,KAAK,EAAE,GAAG,EAAE,CAAC;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAAA,IACA,OAAO;AACL,iBAAW,QAAQ,KAAK,OAAO;AAC7B,oBAAY,OAAO,MAAM;AACzB,YAAI,OAAO,QAAQ,YAAY,KAAK;AACpC,YAAI,OAAO,QAAQ,cAAc,KAAK,MAAM;AAC5C,aAAK,KAAK,MAAM,QAAQ,CAAC,EAAE,GAAG,QAAQ;AACpC,cAAI,OAAO,QAAQ,UAAU;AAC7B,cAAI,OAAO,QAAQ,IAAI,GAAG,GAAG,OAAO,GAAG,GAAG,IAAI,KAAK,EAAE;AACrD,cAAI,OAAO,QAAQ,KAAK;AAAA,QAC1B,CAAC;AAAA,MACH;AAAA,IACF;AAAA,IACA,OAAO,MAAM;AACX,WAAK,aAAa,KAAK,GAAG;AAC1B,WAAK,YAAY;AAAA,IACnB;AAAA,IAEA,cAAc;AACZ,WAAK,SAAS,KAAK;AACnB,UAAI,KAAK,QAAQ,OAAO,KAAK,QAAQ,GAAG;AACtC,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA,IAEA,aAAa,KAAK;AAChB,iBAAW,QAAQ,KAAK,OAAO;AAC7B,cAAM,SAAS;AAAA,UACb,GAAG,CAAC,KAAK,SAAS,QAAQ,IAAI;AAAA,UAC9B,GAAG,CAAC,KAAK,SAAS,QAAQ,IAAI;AAAA,QAChC;AACA,eAAO,OAAO,QAAQ,MAAM,YAC1B,cAAc,OAAO,kBACP,OAAO,aACZ,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,EACF;;;ACvDA,yBAAuB;AACvB,aAAW,SAAS;AAEpB,gBAAc,MAAM;AAClB,eAAW,OAAO;AAElB,UAAM,QAAQ,IAAI,MAAM;AACxB,UAAM,OAAO,IAAI,UAAU;AAE3B,QAAI,cAAc;AAElB,UAAM,SAAS;AACf,UAAM,KAAK;AAEX,WAAO,iBAAiB,WAAW,CAAC,MAAM;AACxC,UAAI,EAAE,OAAO,SAAS;AACpB,YAAI,KAAK,WAAW;AAClB,qBAAW;AACX,cAAI,UAAU;AACd,eAAK,MAAM;AAAA,QACb,WAAW,aAAa;AACtB,qBAAW,OAAO;AAClB,wBAAc;AACd,cAAI,eAAe;AAAA,QACrB,WAAW,CAAC,aAAa;AACvB,qBAAW;AACX,wBAAc;AACd,cAAI,gBAAgB;AACpB,eAAK,UAAU;AACf,eAAK,SAAS;AACd,mBAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO,iBACL,UACA,SAAS,MAAM;AACb,6BAAuB;AACvB,YAAM,SAAS;AACf,YAAM,KAAK;AAAA,IACb,GAAG,GAAG,CACR;AAEA,wBAAoB;AAClB,kBAAY,QAAQ;AACpB,OAAC,GAAG,MAAM,MAAM,GAAG,IAAI,MAAM,MAAM,KAAK,EAAE,QAAQ,CAAC,QACjD,IAAI,OAAO,IAAI,CACjB;AACA,OAAC,GAAG,MAAM,MAAM,GAAG,IAAI,MAAM,IAAI,EAAE,QAAQ,CAAC,QAAQ,IAAI,KAAK,CAAC;AAC9D,UAAI;AAAa,8BAAsB,QAAQ;AAAA,IACjD;AAAA,EACF,CAAC;",
  "names": []
}
